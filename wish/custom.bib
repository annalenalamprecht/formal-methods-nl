%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/

%% Created for ISWB Prasetya at 2018-07-12 17:31:26 +0200 


%% Saved with string encoding Unicode (UTF-8) 



@conference{hageLorenz2018,
	Author = {Jurriaan Hage},
	Booktitle = {A Research Agenda for Formal Methods in The Netherland},
	Date-Added = {2018-07-12 15:24:05 +0000},
	Date-Modified = {2018-07-12 15:24:56 +0000},
	Organization = {Utrecht University},
	Title = {The Usability of Type Systems},
	Year = {2018}}

@conference{wouterLorenz2018,
	Author = {Wouter Swierstra},
	Booktitle = {A Research Agenda for Formal Methods in The Netherland},
	Date-Added = {2018-06-26 11:49:25 +0000},
	Date-Modified = {2018-06-26 11:50:53 +0000},
	Organization = {Utrecht University},
	Title = {Programming with dependent types},
	Year = {2018}}

@inproceedings{cok2004esc,
	Author = {Cok, David R and Kiniry, Joseph R},
	Booktitle = {International Workshop on Construction and Analysis of Safe, Secure, and Interoperable Smart Devices},
	Date-Added = {2018-06-25 20:03:11 +0000},
	Date-Modified = {2018-06-25 20:04:34 +0000},
	Organization = {Springer},
	Pages = {108--128},
	Title = {{ESC}/{Java2}: Uniting {ESC}/{Java} and {JML}},
	Year = {2004}}

@article{cui2011based,
	Author = {Cui, Xiao and Shi, Hao},
	Date-Added = {2018-06-25 19:39:23 +0000},
	Date-Modified = {2018-06-25 19:39:23 +0000},
	Journal = {International Journal of Computer Science and Network Security},
	Number = {1},
	Pages = {125--130},
	Publisher = {International Journal of Computer Science and Network Security (IJCSNS)},
	Title = {A*-based pathfinding in modern computer games},
	Volume = {11},
	Year = {2011}}

@inproceedings{Sud:2008:RPP:1401132.1401206,
	Acmid = {1401206},
	Articleno = {55},
	Author = {Sud, Avneesh and Andersen, Erik and Curtis, Sean and Lin, Ming and Manocha, Dinesh},
	Booktitle = {{ACM SIGGRAPH} 2008 Classes},
	Date-Added = {2018-06-25 19:09:50 +0000},
	Date-Modified = {2018-06-25 19:10:22 +0000},
	Doi = {10.1145/1401132.1401206},
	Keywords = {crowd simulation, motion planning, voronoi diagram},
	Location = {Los Angeles, California},
	Numpages = {9},
	Publisher = {ACM},
	Series = {SIGGRAPH},
	Title = {Real-time Path Planning for Virtual Agents in Dynamic Environments},
	Url = {http://doi.acm.org/10.1145/1401132.1401206},
	Year = {2008},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1401132.1401206},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1401132.1401206}}

@article{biere2003bounded,
	Author = {Biere, Armin and Cimatti, Alessandro and Clarke, Edmund M and Strichman, Ofer and Zhu, Yunshan and others},
	Date-Added = {2018-06-25 06:34:31 +0000},
	Date-Modified = {2018-06-25 06:34:31 +0000},
	Journal = {Advances in computers},
	Number = {11},
	Pages = {117--148},
	Title = {Bounded model checking.},
	Volume = {58},
	Year = {2003}}

@article{nie2011survey,
	Author = {Nie, Changhai and Leung, Hareton},
	Date-Added = {2018-06-25 06:28:04 +0000},
	Date-Modified = {2018-06-25 06:28:21 +0000},
	Journal = {{ACM} Computing Surveys ({CSUR})},
	Number = {2},
	Pages = {11},
	Publisher = {ACM},
	Title = {A survey of combinatorial testing},
	Volume = {43},
	Year = {2011}}

@article{mcminn2004search,
	Author = {McMinn, Phil},
	Date-Added = {2018-06-25 06:25:02 +0000},
	Date-Modified = {2018-06-25 06:25:02 +0000},
	Journal = {Software testing, Verification and reliability},
	Number = {2},
	Pages = {105--156},
	Publisher = {Wiley Online Library},
	Title = {Search-based software test data generation: a survey},
	Volume = {14},
	Year = {2004}}

@inproceedings{ASIL2011,
	Abstract = {Within the context of the FITTEST project, one of our tasks was to instrument ActionScript bytecode, so that aspects of the execution of the running application are logged. Although the decision what to log and when requires manual intervention, the code itself can be weaved into the system automatically by means of aspect-oriented programming (AOP). In this paper we describe Asil, an AOP EDSL for instrumenting ActionScript bytecode, that is firmly based on well-known functional programming technique to provide abstraction mechanisms that other AOP languages tend to lack.},
	Author = {Middelkoop, A. and Elyasov, A. and Prasetya, I.S.W.B.},
	Booktitle = {Proc. Symposium on Implementation and Application of Functional Language ({IFL})},
	Date-Added = {2018-02-22 19:27:29 +0000},
	Date-Modified = {2018-02-22 19:27:29 +0000},
	Publisher = {Springer},
	Title = {Functional Instrumentation of ActionScript Programs with {ASIL}},
	Url = {{http://dx.doi.org/10.1007/978-3-642-34407-7_1}},
	Year = {2011},
	Bdsk-Url-1 = {%7Bhttp://dx.doi.org/10.1007/978-3-642-34407-7_1%7D}}

@inproceedings{leino1999checking,
	Author = {Leino, K Rustan M and Saxe, James B and Stata, Raymie},
	Booktitle = {{ECOOP} Workshops},
	Date-Added = {2018-02-22 18:28:16 +0000},
	Date-Modified = {2018-02-22 18:28:57 +0000},
	Pages = {110--111},
	Title = {Checking Java Programs via Guarded Commands.},
	Year = {1999}}

@inproceedings{PEX,
	Abstract = {Pex automatically produces a small test suite with high code coverage for a .NET program. To this end, Pex performs a systematic program analysis (using dynamic symbolic execution, similar to path-bounded model-checking) to determine test inputs for Parameterized Unit Tests. Pex learns the program behavior by monitoring execution traces. Pex uses a constraint solver to produce new test inputs which exercise different program behavior. The result is an automatically generated small test suite which often achieves high code coverage. In one case study, we applied Pex to a core component of the .NET runtime which had already been extensively tested over several years. Pex found errors, including a serious issue.},
	Author = {Tillmann, Nikolai and de Halleux, Jonathan},
	Booktitle = {Tests and Proofs},
	Date-Added = {2018-02-22 18:25:08 +0000},
	Date-Modified = {2018-02-22 18:25:42 +0000},
	Isbn = {978-3-540-79124-9},
	Pages = {134--153},
	Publisher = {Springer},
	Title = {Pex--White Box Test Generation for {.NET}},
	Year = {2008}}

@inproceedings{CUTE,
	Abstract = {CUTE, a Concolic Unit Testing Engine for C and Java, is a tool to systematically and automatically test sequential C programs (including pointers) and concurrent Java programs. CUTE combines concrete and symbolic execution in a way that avoids redundant test cases as well as false warnings. The tool also introduces a race-flipping technique to efficiently test and model check concurrent programs with data inputs.},
	Address = {Berlin, Heidelberg},
	Author = {Sen, Koushik and Agha, Gul},
	Booktitle = {Computer Aided Verification},
	Date-Added = {2018-02-22 10:17:07 +0000},
	Date-Modified = {2018-02-22 10:17:42 +0000},
	Editor = {Ball, Thomas and Jones, Robert B.},
	Isbn = {978-3-540-37411-4},
	Publisher = {Springer Berlin Heidelberg},
	Title = {{CUTE} and {jCUTE}: Concolic Unit Testing and Explicit Path Model-Checking Tools},
	Year = {2006}}

@inproceedings{SBSTContest2018,
	Author = {Molina, Urko Rueda and Kifetew, Fitsum and Panichella, Annibale},
	Booktitle = {11th Int. Workshop on Search-Based Software Testing},
	Date-Added = {2018-02-22 08:59:20 +0000},
	Date-Modified = {2018-03-12 19:54:16 +0000},
	Publisher = {ACM},
	Title = {Java Unit Testing Tool Competition - Sixth Round},
	Year = {2018}}

@inproceedings{prasetya2016budget,
	Abstract = {Random testing has the advantage that it is usually fast. An interesting use case is to use it for bulk smoke testing, e.g. to smoke test a whole project. However, on a large project, even with random testing it may still take hours to complete. To optimize this, we have adapted an automated random testing tool called T3 so that it becomes aware of the time budget we set for a given target class. Test suites are now generated incrementally, and their refinements are adaptively scheduled towards maximizing the coverage, given the remaining time. This paper presents an evaluation of the performance of this adaptation, using the benchmark provided by the SBST 2016 Java Unit Testing Tool Contest.},
	Author = {Prasetya, I. S. W. B.},
	Booktitle = {9th Int. Workshop on Search-Based Software Testing},
	Date-Added = {2018-02-21 13:26:42 +0000},
	Date-Modified = {2018-02-21 13:27:16 +0000},
	Organization = {ACM},
	Pages = {29--32},
	Title = {Budget-aware random testing with {T3}: benchmarking at the {SBST2016} testing tool contest},
	Url = {{http://dx.doi.org/10.1145/2897010.2897019}},
	Year = {2016},
	Bdsk-Url-1 = {%7Bhttp://dx.doi.org/10.1145/2897010.2897019%7D}}

@article{Dijkstra-WP,
	Acmid = {360975},
	Author = {Dijkstra, Edsger W.},
	Date-Added = {2018-02-21 11:44:00 +0000},
	Date-Modified = {2018-02-21 11:44:34 +0000},
	Doi = {10.1145/360933.360975},
	Issn = {0001-0782},
	Issue_Date = {Aug. 1975},
	Journal = {Commun. ACM},
	Keywords = {case-construction, correctness proof, derivation of programs, nondeterminancy, program semantics, programming language semantics, programming languages, programming methodology, repetition, sequencing primitives, termination},
	Number = {8},
	Pages = {453--457},
	Publisher = {ACM},
	Title = {Guarded Commands, Nondeterminacy and Formal Derivation of Programs},
	Url = {http://doi.acm.org/10.1145/360933.360975},
	Volume = {18},
	Year = {1975},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/360933.360975},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/360933.360975}}

@inproceedings{RANDOOP-ICSE,
	Acmid = {1248841},
	Author = {Pacheco, Carlos and Lahiri, Shuvendu K. and Ernst, Michael D. and Ball, Thomas},
	Booktitle = {29th Int. Conf. on Software Engineering},
	Date-Added = {2018-02-21 10:26:30 +0000},
	Date-Modified = {2018-02-21 10:27:32 +0000},
	Doi = {10.1109/ICSE.2007.37},
	Isbn = {0-7695-2828-7},
	Pages = {75--84},
	Publisher = {IEEE},
	Title = {Feedback-Directed Random Test Generation},
	Url = {http://dx.doi.org/10.1109/ICSE.2007.37},
	Year = {2007},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSE.2007.37}}

@article{AlgOracle2013,
	Abstract = {Software systems often produce logs that capture information about their execution behaviour. When an error occurs, the log file with the error is reported for subsequent analysis. The longer the log file, the harder to identify the cause of the observed error. This problem can be considerably simplified if we reduce the log length, e.g., by removing events which do not contribute towards finding the error. This paper addresses the problem of log reduction by rewriting the reported log in such a way that it preserves the ability to reproduce the same error. The approach exploits rewrite rules inferred from a set of predefined algebraic rewrite rule patterns, exhibiting such properties as commutativity and identity. The paper presents an algorithm for rewrite rules inference, and a terminating reduction strategy based on these rules. Being log-based the inference algorithm is inherently imprecise. So the inferred rules need to be inspected by a human expert before actually being used for rewriting. The approach is language independent and highly flexible. The paper formally defines all used concepts and discusses a prototype implementation of a log reduction framework. The prototype was empirically validated on a web shop application.},
	Author = {Elyasov, A. and Prasetya, I. S. W. B. and Hage, J.},
	Journal = {The 25th IFIP Int. Conference on Testing Software and Systems (ICTSS), LNCS},
	Publisher = {Springer},
	Title = {Guided Algebraic Specification Mining for Failure Simplification},
	Url = {{http://dx.doi.org/10.1007/978-3-642-41707-8_15}},
	Volume = {8254},
	Year = {2013},
	Bdsk-Url-1 = {%7Bhttp://dx.doi.org/10.1007/978-3-642-41707-8_15%7D}}

@article{ernst2007daikon,
	Author = {Ernst, M.D and Perkins, J.H. and Guo, P.J. and McCamant, S. and Pacheco, C. and Tschantz, M.S. and Xiao, C.},
	Journal = {Science of Computer Programming},
	Number = {1},
	Pages = {35--45},
	Publisher = {Elsevier},
	Title = {The {Daikon} system for dynamic detection of likely invariants},
	Volume = {69},
	Year = {2007}}

@inproceedings{GRT,
	Author = {Ma, L. and Artho, C. and Zhang, C. and Sato, H. and Hagiya, M. and Tanabe, Y. and Yamamoto, M.},
	Booktitle = {8th Int. Workshop on Search-Based Software Testing},
	Pages = {48--51},
	Title = {{GRT} at the {SBST} 2015 Tool Competition},
	Year = {2015}}

@inproceedings{T3i2015,
	Abstract = {T3i is an automated unit-testing tool to test Java classes. To expose interactions T3i generates test-cases in the form of sequences of calls to the methods of the target class. What separates it from other testing tools is that it treats test suites as first class objects and allows users to e.g. combine, query, and filter them. With these operations, the user can construct a test suite with specific properties. Queries can be used to check correctness properties. Hoare triples, LTL formulas, and algebraic equations can be queried. T3i can be used interactively, thus facilitating more exploratory testing, as well as through a script. The familiar Java syntax can be used to control it, or alternatively one can use the much lighter Groovy syntax.},
	Author = {Prasetya, I. S. W. B.},
	Booktitle = {10th Joint Meeting of {ESEC}￿ and the {ACM SIGSOFT} Symposium on the Foundations of Software Engineering (FSE)},
	Publisher = {ACM},
	Title = {{T3i}: A Tool for Generating and Querying Test Suites for Java},
	Year = {2015}}

@inproceedings{RANDOOP,
	Acmid = {1297902},
	Author = {Pacheco, Carlos and Ernst, Michael D.},
	Booktitle = {Companion to the 22nd ACM SIGPLAN conf. on Object-oriented programming systems and applications ({OOPSLA})},
	Doi = {10.1145/1297846.1297902},
	Isbn = {978-1-59593-865-7},
	Keywords = {Java, automatic test generation, random testing},
	Numpages = {2},
	Pages = {815--816},
	Publisher = {ACM},
	Title = {Randoop: feedback-directed random testing for {Java}},
	Year = {2007},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/1297846.1297902}}

@article{JTexpert,
	Author = {Sakti, A. and Pesant, G. and Gu{\'e}h{\'e}neuc, Y.},
	Journal = {{IEEE} Transactions on Software Engineering},
	Number = {3},
	Pages = {294-313},
	Publisher = {IEEE},
	Title = {Instance Generator and Problem Representation to Improve Object Oriented Code Coverage},
	Volume = {41},
	Year = {2015}}

@inproceedings{fraser2011evosuite,
	Author = {Fraser, Gordon and Arcuri, Andrea},
	Booktitle = {SIGSOFT FSE},
	Pages = {416--419},
	Title = {EvoSuite: automatic test suite generation for object-oriented software.},
	Year = {2011}}

@article{TTbenchmark,
	Author = {I. S. W. B. Prasetya},
	Doi = {http://dx.doi.org/10.1109/ICSTW.2013.54},
	Journal = {Proc. of 6th Int. Conf. on Softw. Testing, Verification and Validation Workshops (ICSTW)},
	Publisher = {IEEE},
	Title = {Measuring {T2} against {SBST} 2013 Benchmark Suite},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSTW.2013.54}}

@article{swierstra2001combinator,
	Author = {Swierstra, S.D.},
	Journal = {Electronic Notes in Theoretical Computer Science},
	Number = {1},
	Pages = {38--59},
	Publisher = {Elsevier},
	Title = {Combinator parsers: from Toys to Tools},
	Volume = {41},
	Year = {2001}}

@article{T3benchmark2014,
	Author = {I. S. W. B. Prasetya},
	Doi = {http://dx.doi.org/10.1007/978-3-319-07785-7_7},
	Journal = {Int. Workshop Future Internet Testing},
	Publisher = {Springer},
	Series = {LNCS},
	Title = {T3, a Combinator-based Random Testing Tool for {Java}: Benchmarking},
	Volumne = {8432},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-319-07785-7_7}}

@inproceedings{T3benchmark2015,
	Abstract = {T3 is a light weight automated unit testing tool for Java. This paper presents the result of benchmarking of T3 at the 3rd Java Unit Testing Tool Contest organized at the 8th International Workshop on Search-Based Software Testing (SBST) in 2015.},
	Author = {Prasetya, I. S. W. B.},
	Booktitle = {{IEEE/ACM} 8th Int. Workshop on Search-Based Software Testing ({SBST})},
	Publisher = {IEEE},
	Title = {{T3}: Benchmarking at Third Unit Testing Tool Contest},
	Url = {{http://dx.doi.org/10.1109/SBST.2015.18}},
	Year = {2015},
	Bdsk-Url-1 = {%7Bhttp://dx.doi.org/10.1109/SBST.2015.18%7D}}

@article{TT,
	Author = {I. S. W. B. Prasetya and T. E. J. Vos and A. Baars},
	Doi = {http://doi.ieeecomputersociety.org/10.1109/ICST.2008.12},
	Journal = {1st Int. Conf. on Software Testing, Verification, and Validation (ICST)},
	Publisher = {IEEE},
	Title = {Trace-based Reflexive Testing of {OO} Programs with {T2}},
	Year = {2008},
	Bdsk-Url-1 = {http://doi.ieeecomputersociety.org/10.1109/ICST.2008.12}}

@techreport{TTtechrep,
	Author = {I. S. W. B. Prasetya and T. E. J. Vos and A. Baars},
	Institution = {Dept. Inf. \& Comp. Sciences, Utrecht Univ.},
	Number = {UU-CS-2007-037},
	Title = {Trace-based Reflexive Testing of OO Programs},
	Url = {www.cs.uu.nl/research/techreps/UU-CS-2007-037.html},
	Year = {2007},
	Bdsk-Url-1 = {www.cs.uu.nl/research/techreps/UU-CS-2007-037.html}}

@misc{T3site,
	Note = {\url{https://git.science.uu.nl/prase101/t3}},
	Title = {T3 site}}

@article{FITTEST2013Contest,
	Author = {S. Bauersfeld and T. Vos and K. Lakhotia},
	Doi = {http://dx.doi.org/10.1007/978-3-319-07785-7_5},
	Journal = {Workshop on Future Internet Testing ({FITTEST})},
	Series = {LNCS},
	Title = {Unit Testing Tool Competition -- Lessons Learned},
	Volumne = {8432},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-319-07785-7_5}}

@article{SBST2013Contest,
	Author = {S. Bauersfeld and T. E. J. Vos and K. Lakhotia and S. Poulding and N. Condori},
	Journal = {International Workshop on Search-Based Software Testing ({SBST})},
	Title = {Unit Testing Tool Competition},
	Year = {2013}}

@inproceedings{SBST2015Contest,
	Abstract = {This paper describes the third round of the Java Unit Testing Tool Competition. This edition of the contest evaluates no less than seven automated testing tools! And, like during the second round, test suites written by human testers are also used for comparison. This paper contains the full results of the evaluation.},
	Author = {Rueda, U. and Vos, T.E.J. and Prasetya, I. S. W. B.},
	Booktitle = {{IEEE/ACM} 8th International Workshop on Search-Based Software Testing ({SBST})},
	Publisher = {IEEE},
	Title = {Unit Testing Tool Competition -- Round Three},
	Url = {{http://dx.doi.org/10.1109/SBST.2015.12}},
	Year = {2015},
	Bdsk-Url-1 = {%7Bhttp://dx.doi.org/10.1109/SBST.2015.12%7D}}

@inproceedings{SBST2016Contest,
	Author = {Rueda, U. and Just, R. and Galeotti, J.P. and Vos, T.E.J.},
	Booktitle = {{ACM/IEEE} 9th International Workshop on Search-Based Software Testing ({SBST})},
	Publisher = {ACM/IEEE},
	Title = {Unit Testing Tool Competition -- Round Fout},
	Year = {2015}}

@mastersthesis{T2ExtensionMasterThesis,
	Author = {M. Gerritsen},
	Note = {Available at: \url{http://www.cs.uu.nl/wiki/WP/T2Framework}},
	Number = {INF/SCR-08-14},
	School = {Dept. Inf. and Comp. Sciences, Utrecht Univ.},
	Title = {Extending {T2} with Prime Path Coverage Exploration},
	Year = 2008}

@inproceedings{QuickCheck,
	Author = {K. Claessen and J. Hughes},
	Booktitle = {{ACM} Int. Conf. on Functional Programming ({ICFP})},
	Title = {{QuickCheck}: a lightweight tool for random testing of {H}askell programs},
	Year = {2000}}

@inproceedings{PanichellaICST15,
	Author = {Annibale Panichella and Fitsum Meshesha Kifetew and Paolo Tonella},
	Booktitle = {Int. Conf. on Softw. Testing, Verification and Validation (ICST)},
	Title = {Reformulating Branch Coverage as a Many-Objective Optimization Problem},
	Year = {2015}}
